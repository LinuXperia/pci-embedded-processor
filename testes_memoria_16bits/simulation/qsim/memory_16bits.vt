// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/08/2014 16:38:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    memory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memory_vlg_sample_tst(
	clk,
	MAR_load,
	MDR_load,
	MEM_bus,
	MEM_en,
	MEM_rw,
	MEM_valid,
	nrst,
	sampler_tx
);
input  clk;
input  MAR_load;
input  MDR_load;
input [15:0] MEM_bus;
input  MEM_en;
input  MEM_rw;
input  MEM_valid;
input  nrst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or MAR_load or MDR_load or MEM_bus or MEM_en or MEM_rw or MEM_valid or nrst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module memory_vlg_check_tst (
	MEM_bus,
	sampler_rx
);
input [15:0] MEM_bus;
input sampler_rx;

reg [15:0] MEM_bus_expected;

reg [15:0] MEM_bus_prev;

reg [15:0] MEM_bus_expected_prev;

reg [15:0] last_MEM_bus_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	MEM_bus_prev = MEM_bus;
end

// update expected /o prevs

always @(trigger)
begin
	MEM_bus_expected_prev = MEM_bus_expected;
end


// generate trigger
always @(MEM_bus_expected or MEM_bus)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected MEM_bus = %b | ",MEM_bus_expected_prev);
	$display("| real MEM_bus = %b | ",MEM_bus_prev);
`endif
	if (
		( MEM_bus_expected_prev[0] !== 1'bx ) && ( MEM_bus_prev[0] !== MEM_bus_expected_prev[0] )
		&& ((MEM_bus_expected_prev[0] !== last_MEM_bus_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[0] = MEM_bus_expected_prev[0];
	end
	if (
		( MEM_bus_expected_prev[1] !== 1'bx ) && ( MEM_bus_prev[1] !== MEM_bus_expected_prev[1] )
		&& ((MEM_bus_expected_prev[1] !== last_MEM_bus_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[1] = MEM_bus_expected_prev[1];
	end
	if (
		( MEM_bus_expected_prev[2] !== 1'bx ) && ( MEM_bus_prev[2] !== MEM_bus_expected_prev[2] )
		&& ((MEM_bus_expected_prev[2] !== last_MEM_bus_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[2] = MEM_bus_expected_prev[2];
	end
	if (
		( MEM_bus_expected_prev[3] !== 1'bx ) && ( MEM_bus_prev[3] !== MEM_bus_expected_prev[3] )
		&& ((MEM_bus_expected_prev[3] !== last_MEM_bus_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[3] = MEM_bus_expected_prev[3];
	end
	if (
		( MEM_bus_expected_prev[4] !== 1'bx ) && ( MEM_bus_prev[4] !== MEM_bus_expected_prev[4] )
		&& ((MEM_bus_expected_prev[4] !== last_MEM_bus_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[4] = MEM_bus_expected_prev[4];
	end
	if (
		( MEM_bus_expected_prev[5] !== 1'bx ) && ( MEM_bus_prev[5] !== MEM_bus_expected_prev[5] )
		&& ((MEM_bus_expected_prev[5] !== last_MEM_bus_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[5] = MEM_bus_expected_prev[5];
	end
	if (
		( MEM_bus_expected_prev[6] !== 1'bx ) && ( MEM_bus_prev[6] !== MEM_bus_expected_prev[6] )
		&& ((MEM_bus_expected_prev[6] !== last_MEM_bus_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[6] = MEM_bus_expected_prev[6];
	end
	if (
		( MEM_bus_expected_prev[7] !== 1'bx ) && ( MEM_bus_prev[7] !== MEM_bus_expected_prev[7] )
		&& ((MEM_bus_expected_prev[7] !== last_MEM_bus_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[7] = MEM_bus_expected_prev[7];
	end
	if (
		( MEM_bus_expected_prev[8] !== 1'bx ) && ( MEM_bus_prev[8] !== MEM_bus_expected_prev[8] )
		&& ((MEM_bus_expected_prev[8] !== last_MEM_bus_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[8] = MEM_bus_expected_prev[8];
	end
	if (
		( MEM_bus_expected_prev[9] !== 1'bx ) && ( MEM_bus_prev[9] !== MEM_bus_expected_prev[9] )
		&& ((MEM_bus_expected_prev[9] !== last_MEM_bus_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[9] = MEM_bus_expected_prev[9];
	end
	if (
		( MEM_bus_expected_prev[10] !== 1'bx ) && ( MEM_bus_prev[10] !== MEM_bus_expected_prev[10] )
		&& ((MEM_bus_expected_prev[10] !== last_MEM_bus_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[10] = MEM_bus_expected_prev[10];
	end
	if (
		( MEM_bus_expected_prev[11] !== 1'bx ) && ( MEM_bus_prev[11] !== MEM_bus_expected_prev[11] )
		&& ((MEM_bus_expected_prev[11] !== last_MEM_bus_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[11] = MEM_bus_expected_prev[11];
	end
	if (
		( MEM_bus_expected_prev[12] !== 1'bx ) && ( MEM_bus_prev[12] !== MEM_bus_expected_prev[12] )
		&& ((MEM_bus_expected_prev[12] !== last_MEM_bus_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[12] = MEM_bus_expected_prev[12];
	end
	if (
		( MEM_bus_expected_prev[13] !== 1'bx ) && ( MEM_bus_prev[13] !== MEM_bus_expected_prev[13] )
		&& ((MEM_bus_expected_prev[13] !== last_MEM_bus_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[13] = MEM_bus_expected_prev[13];
	end
	if (
		( MEM_bus_expected_prev[14] !== 1'bx ) && ( MEM_bus_prev[14] !== MEM_bus_expected_prev[14] )
		&& ((MEM_bus_expected_prev[14] !== last_MEM_bus_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[14] = MEM_bus_expected_prev[14];
	end
	if (
		( MEM_bus_expected_prev[15] !== 1'bx ) && ( MEM_bus_prev[15] !== MEM_bus_expected_prev[15] )
		&& ((MEM_bus_expected_prev[15] !== last_MEM_bus_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_bus[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_bus_expected_prev);
		$display ("     Real value = %b", MEM_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MEM_bus_exp[15] = MEM_bus_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module memory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg MAR_load;
reg MDR_load;
reg [15:0] treg_MEM_bus;
reg MEM_en;
reg MEM_rw;
reg MEM_valid;
reg nrst;
// wires                                               
wire [15:0] MEM_bus;

wire sampler;                             

// assign statements (if any)                          
assign MEM_bus = treg_MEM_bus;
memory i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.MAR_load(MAR_load),
	.MDR_load(MDR_load),
	.MEM_bus(MEM_bus),
	.MEM_en(MEM_en),
	.MEM_rw(MEM_rw),
	.MEM_valid(MEM_valid),
	.nrst(nrst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// MAR_load
initial
begin
	MAR_load = 1'b0;
	MAR_load = #210000 1'b1;
	MAR_load = #50000 1'b0;
	MAR_load = #160000 1'b1;
	MAR_load = #50000 1'b0;
end 

// MDR_load
initial
begin
	MDR_load = 1'b0;
	MDR_load = #100000 1'b1;
	MDR_load = #40000 1'b0;
	MDR_load = #170000 1'b1;
	MDR_load = #40000 1'b0;
end 
// MEM_bus[ 15 ]
initial
begin
	treg_MEM_bus[15] = 1'bZ;
end 
// MEM_bus[ 14 ]
initial
begin
	treg_MEM_bus[14] = 1'bZ;
end 
// MEM_bus[ 13 ]
initial
begin
	treg_MEM_bus[13] = 1'bZ;
end 
// MEM_bus[ 12 ]
initial
begin
	treg_MEM_bus[12] = 1'bZ;
end 
// MEM_bus[ 11 ]
initial
begin
	treg_MEM_bus[11] = 1'bZ;
	treg_MEM_bus[11] = #90000 1'b0;
	treg_MEM_bus[11] = #50000 1'bZ;
	treg_MEM_bus[11] = #150000 1'b0;
	treg_MEM_bus[11] = #50000 1'bZ;
end 
// MEM_bus[ 10 ]
initial
begin
	treg_MEM_bus[10] = 1'bZ;
	treg_MEM_bus[10] = #90000 1'b0;
	treg_MEM_bus[10] = #50000 1'bZ;
	treg_MEM_bus[10] = #150000 1'b0;
	treg_MEM_bus[10] = #50000 1'bZ;
end 
// MEM_bus[ 9 ]
initial
begin
	treg_MEM_bus[9] = 1'bZ;
	treg_MEM_bus[9] = #90000 1'b0;
	treg_MEM_bus[9] = #50000 1'bZ;
	treg_MEM_bus[9] = #150000 1'b0;
	treg_MEM_bus[9] = #50000 1'bZ;
end 
// MEM_bus[ 8 ]
initial
begin
	treg_MEM_bus[8] = 1'bZ;
	treg_MEM_bus[8] = #90000 1'b0;
	treg_MEM_bus[8] = #50000 1'bZ;
	treg_MEM_bus[8] = #150000 1'b0;
	treg_MEM_bus[8] = #50000 1'bZ;
end 
// MEM_bus[ 7 ]
initial
begin
	treg_MEM_bus[7] = 1'bZ;
	treg_MEM_bus[7] = #90000 1'b1;
	treg_MEM_bus[7] = #50000 1'bZ;
	treg_MEM_bus[7] = #150000 1'b0;
	treg_MEM_bus[7] = #50000 1'bZ;
end 
// MEM_bus[ 6 ]
initial
begin
	treg_MEM_bus[6] = 1'bZ;
	treg_MEM_bus[6] = #90000 1'b0;
	treg_MEM_bus[6] = #50000 1'bZ;
	treg_MEM_bus[6] = #150000 1'b0;
	treg_MEM_bus[6] = #50000 1'bZ;
end 
// MEM_bus[ 5 ]
initial
begin
	treg_MEM_bus[5] = 1'bZ;
	treg_MEM_bus[5] = #90000 1'b1;
	treg_MEM_bus[5] = #50000 1'bZ;
	treg_MEM_bus[5] = #150000 1'b0;
	treg_MEM_bus[5] = #50000 1'bZ;
end 
// MEM_bus[ 4 ]
initial
begin
	treg_MEM_bus[4] = 1'bZ;
	treg_MEM_bus[4] = #90000 1'b0;
	treg_MEM_bus[4] = #50000 1'bZ;
	treg_MEM_bus[4] = #150000 1'b0;
	treg_MEM_bus[4] = #50000 1'bZ;
end 
// MEM_bus[ 3 ]
initial
begin
	treg_MEM_bus[3] = 1'bZ;
	treg_MEM_bus[3] = #90000 1'b0;
	treg_MEM_bus[3] = #50000 1'bZ;
	treg_MEM_bus[3] = #150000 1'b0;
	treg_MEM_bus[3] = #50000 1'bZ;
end 
// MEM_bus[ 2 ]
initial
begin
	treg_MEM_bus[2] = 1'bZ;
	treg_MEM_bus[2] = #90000 1'b1;
	treg_MEM_bus[2] = #50000 1'bZ;
	treg_MEM_bus[2] = #150000 1'b0;
	treg_MEM_bus[2] = #50000 1'bZ;
end 
// MEM_bus[ 1 ]
initial
begin
	treg_MEM_bus[1] = 1'bZ;
	treg_MEM_bus[1] = #90000 1'b0;
	treg_MEM_bus[1] = #50000 1'bZ;
	treg_MEM_bus[1] = #150000 1'b1;
	treg_MEM_bus[1] = #50000 1'bZ;
end 
// MEM_bus[ 0 ]
initial
begin
	treg_MEM_bus[0] = 1'bZ;
	treg_MEM_bus[0] = #90000 1'b1;
	treg_MEM_bus[0] = #50000 1'bZ;
	treg_MEM_bus[0] = #150000 1'b0;
	treg_MEM_bus[0] = #50000 1'bZ;
end 

// MEM_en
initial
begin
	MEM_en = 1'b0;
	MEM_en = #50000 1'b1;
end 

// MEM_rw
always
begin
	MEM_rw = 1'b0;
	MEM_rw = #100000 1'b1;
	#100000;
end 

// MEM_valid
initial
begin
	MEM_valid = 1'b0;
	MEM_valid = #50000 1'b1;
end 

// nrst
initial
begin
	nrst = 1'b1;
	nrst = #50000 1'b0;
	nrst = #50000 1'b1;
end 

memory_vlg_sample_tst tb_sample (
	.clk(clk),
	.MAR_load(MAR_load),
	.MDR_load(MDR_load),
	.MEM_bus(MEM_bus),
	.MEM_en(MEM_en),
	.MEM_rw(MEM_rw),
	.MEM_valid(MEM_valid),
	.nrst(nrst),
	.sampler_tx(sampler)
);

memory_vlg_check_tst tb_out(
	.MEM_bus(MEM_bus),
	.sampler_rx(sampler)
);
endmodule

